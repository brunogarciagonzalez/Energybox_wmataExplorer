{"version":3,"sources":["components/Header.js","misc/filterOptions.js","components/FiltersContainer.js","misc/LINES_KEY.js","components/TableRow.js","components/TableContainer.js","misc/API_KEY.js","misc/URL.js","App.js","serviceWorker.js","index.js"],"names":["Header","_","react_default","a","createElement","role","aria-label","lineOptions","key","text","value","carCountOptions","serviceOptions","FiltersContainer","props","Segment","Dropdown","selection","onChange","data","handleFilterChange","placeholder","options","LINES_KEY","SV","RD","OR","BL","YL","GR","TableRow","_props$trainObj","trainObj","TrainId","TrainNumber","LineCode","ServiceType","CarCount","CircuitId","SecondsAtLocation","Table","Row","Cell","style","backgroundColor","TableContainer","celled","HeaderCell","Body","trains","map","index","components_TableRow","API_KEY","misc_URL","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","trainsFetch","fetch","URL","headers","api_key","then","responseObj","json","trainData","sortedTrains","sort","b","parseInt","setState","newValue","filter","stateFiltersCopy","objectSpread","state","filters","filteredTrains","_this$state$filters","lineColorFilter","carCountFilter","serviceTypeFilter","outputArray","toConsumableArray","intervalID","setInterval","clearInterval","components_Header","components_FiltersContainer","components_TableContainer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.702ef411.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = _ => {\n  return (\n    <h1>\n      <center>\n        <span role=\"img\" aria-label=\"train emoji\">\n          ðŸš†\n        </span>\n        WMATA Train Explorer\n        <span role=\"img\" aria-label=\"train emoji\">\n          ðŸš†\n        </span>\n      </center>\n    </h1>\n  );\n};\n\nexport default Header;\n","const lineOptions = [\n  {\n    key: \"noFilter\",\n    text: \"Don't Filter\",\n    value: \"noFilter\"\n  },\n  {\n    key: \"OR\",\n    text: \"Orange\",\n    value: \"OR\"\n  },\n  {\n    key: \"SV\",\n    text: \"Silver\",\n    value: \"SV\"\n  },\n  {\n    key: \"BL\",\n    text: \"Blue\",\n    value: \"BL\"\n  },\n  {\n    key: \"RD\",\n    text: \"Red\",\n    value: \"RD\"\n  },\n  {\n    key: \"GR\",\n    text: \"Green\",\n    value: \"GR\"\n  },\n  {\n    key: \"YL\",\n    text: \"Yellow\",\n    value: \"YL\"\n  }\n];\n\nconst carCountOptions = [\n  {\n    key: \"noFilter\",\n    text: \"Don't Filter\",\n    value: \"noFilter\"\n  },\n  {\n    key: \"0\",\n    text: \"0\",\n    value: 0\n  },\n  {\n    key: \"2\",\n    text: \"2\",\n    value: 2\n  },\n  {\n    key: \"6\",\n    text: \"6\",\n    value: 6\n  },\n  {\n    key: \"8\",\n    text: \"8\",\n    value: 8\n  }\n];\n\nconst serviceOptions = [\n  {\n    key: \"noFilter\",\n    text: \"Don't Filter\",\n    value: \"noFilter\"\n  },\n  {\n    key: \"Normal\",\n    text: \"Normal\",\n    value: \"Normal\"\n  },\n  {\n    key: \"NoPassengers\",\n    text: \"No Passengers\",\n    value: \"NoPassengers\"\n  },\n  {\n    key: \"Unknown\",\n    text: \"Unknown\",\n    value: \"Unknown\"\n  }\n];\n\nexport { lineOptions, carCountOptions, serviceOptions };\n","import React from \"react\";\nimport { Segment, Dropdown } from \"semantic-ui-react\";\nimport {\n  lineOptions,\n  carCountOptions,\n  serviceOptions\n} from \"./../misc/filterOptions\";\n\nconst FiltersContainer = props => {\n  return (\n    <Segment>\n      <center>\n        <Dropdown\n          selection\n          onChange={(_, data) =>\n            props.handleFilterChange(data.value, \"lineColorFilter\")\n          }\n          placeholder=\"Filter By Line Color\"\n          options={lineOptions}\n        />\n        <Dropdown\n          selection\n          onChange={(_, data) =>\n            props.handleFilterChange(data.value, \"carCountFilter\")\n          }\n          placeholder=\"Filter By Car Count\"\n          options={carCountOptions}\n        />\n        <Dropdown\n          selection\n          onChange={(_, data) =>\n            props.handleFilterChange(data.value, \"serviceTypeFilter\")\n          }\n          placeholder=\"Filter By Service Type\"\n          options={serviceOptions}\n        />\n      </center>\n    </Segment>\n  );\n};\n\nexport default FiltersContainer;\n","export default {\n  SV: \"silver\",\n  RD: \"red\",\n  OR: \"orange\",\n  BL: \"blue\",\n  YL: \"yellow\",\n  GR: \"green\"\n};\n","import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport LINES_KEY from \"./../misc/LINES_KEY\";\n\nconst TableRow = props => {\n  const {\n    TrainId,\n    TrainNumber,\n    LineCode,\n    ServiceType,\n    CarCount,\n    CircuitId,\n    SecondsAtLocation\n  } = props.trainObj;\n\n  return (\n    <Table.Row>\n      <Table.Cell>{TrainId}</Table.Cell>\n      <Table.Cell>{TrainNumber}</Table.Cell>\n      <Table.Cell\n        style={{ backgroundColor: LineCode ? LINES_KEY[LineCode] : null }}\n      >\n        {LineCode ? LineCode : \" N / A\"}\n      </Table.Cell>\n      <Table.Cell>{ServiceType}</Table.Cell>\n      <Table.Cell>{CarCount}</Table.Cell>\n      <Table.Cell>{CircuitId}</Table.Cell>\n      <Table.Cell>{SecondsAtLocation}</Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default TableRow;\n","import React from \"react\";\nimport TableRow from \"./TableRow\";\nimport { Table } from \"semantic-ui-react\";\n\nconst TableContainer = props => {\n  return (\n    <Table celled>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Train ID</Table.HeaderCell>\n          <Table.HeaderCell>Train No.</Table.HeaderCell>\n          <Table.HeaderCell>Line Code</Table.HeaderCell>\n          <Table.HeaderCell>Service Type</Table.HeaderCell>\n          <Table.HeaderCell>Car Count</Table.HeaderCell>\n          <Table.HeaderCell>Circuit ID</Table.HeaderCell>\n          <Table.HeaderCell>Seconds At Location</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n\n      <Table.Body>\n        {props.trains.map((trainObj, index) => (\n          <TableRow key={trainObj.TrainId} trainObj={trainObj} />\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default TableContainer;\n// <div>\n//   <table>\n//     <thead>\n//       <tr>\n//         <th>Train ID</th>\n//         <th>Train No.</th>\n//         <th>Line Code</th>\n//         <th>Service Type</th>\n//         <th>Car Count</th>\n//         <th>Circuit ID</th>\n//         <th>Desitnation Station Code</th>\n//         <th>Direction No.</th>\n//         <th>Seconds At Location</th>\n//       </tr>\n//     </thead>\n//     <tbody>\n//       {props.trainData.map(trainObj => <TableRow trainObj={trainObj} />)}\n//     </tbody>\n//   </table>\n// </div>\n","export default \"e13626d03d8e4c03ac07f95541b3091b\";\n","export default \"https://api.wmata.com/TrainPositions/TrainPositions?contentType=json\";\n","import React from \"react\";\n\nimport Header from \"./components/Header\";\nimport FiltersContainer from \"./components/FiltersContainer\";\nimport TableContainer from \"./components/TableContainer\";\nimport API_KEY from \"./misc/API_KEY\";\nimport URL from \"./misc/URL\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      trains: [],\n      intervalID: 0,\n      filters: {\n        lineColorFilter: \"noFilter\",\n        carCountFilter: \"noFilter\",\n        serviceTypeFilter: \"noFilter\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.trainsFetch();\n    let intervalID = setInterval(this.trainsFetch, 5000);\n\n    this.setState({\n      intervalID\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalID);\n  }\n\n  trainsFetch = () => {\n    let options = {\n      headers: {\n        api_key: API_KEY\n      }\n    };\n\n    fetch(URL, options)\n      .then(responseObj => responseObj.json())\n      .then(trainData => {\n        let sortedTrains = trainData[\"TrainPositions\"].sort((a, b) => {\n          return parseInt(a.TrainId) - parseInt(b.TrainId);\n        });\n\n        this.setState({\n          trains: sortedTrains\n        });\n      });\n  };\n\n  handleFilterChange = (newValue, filter) => {\n    let stateFiltersCopy = { ...this.state.filters };\n    stateFiltersCopy[filter] = newValue;\n\n    this.setState({\n      filters: stateFiltersCopy\n    });\n  };\n\n  filteredTrains = () => {\n    const {\n      lineColorFilter,\n      carCountFilter,\n      serviceTypeFilter\n    } = this.state.filters;\n\n    let outputArray = [...this.state.trains];\n\n    if (lineColorFilter !== \"noFilter\") {\n      outputArray = outputArray.filter(trainObj => {\n        return trainObj.LineCode === lineColorFilter;\n      });\n    }\n\n    if (carCountFilter !== \"noFilter\") {\n      outputArray = outputArray.filter(trainObj => {\n        return trainObj.CarCount === carCountFilter;\n      });\n    }\n\n    if (serviceTypeFilter !== \"noFilter\") {\n      outputArray = outputArray.filter(trainObj => {\n        return trainObj.ServiceType === serviceTypeFilter;\n      });\n    }\n\n    return outputArray;\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <FiltersContainer handleFilterChange={this.handleFilterChange} />\n        <TableContainer trains={this.filteredTrains()} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n//## As a user I'd like to be able to see all the trains!\n//## As a user I'd like to be able to filter by train line color.\n//## As a user I'd like to be able to filter by different service types.\n//## As a user I'd like to be able to filter by car count.\n//## As a user I'd like to be able to visually distinguish trains on different colored lines from each other.\n//## As a user I'd like to be able to visually distinguish between different car counts.\n//## As a user I'd like to be able to distinguish trains by different service types.\n//As a user I'd like to see the page automatically update as the trains' positions update.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}